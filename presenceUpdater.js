"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const mongodb_1 = require("mongodb");
const fs_1 = require("fs");
mongodb_1.connect(`mongodb://${process.env.MONGO_USERNAME}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_IP}:27017`, {
    appname: "PreMiD-PresenceUpdater",
    useUnifiedTopology: true
}).then(run);
async function run(MongoClient) {
    const dbPresences = await MongoClient.db("PreMiD")
        .collection("presences")
        .find()
        .toArray();
    const presenceFolders = fs_1.readdirSync("./").filter(pF => !pF.startsWith("@") &&
        !pF.startsWith(".") &&
        !pF.startsWith("node_modules") &&
        fs_1.statSync(pF).isDirectory());
    const presences = presenceFolders.map(pF => {
        const metadata = JSON.parse(fs_1.readFileSync(`${pF}/dist/metadata.json`, "utf-8")), presenceJs = fs_1.readFileSync(`${pF}/dist/presence.js`, "utf-8");
        let resJson = {
            name: metadata.service,
            url: `https://api.premid.app/v2/presences/${encodeURI(metadata.service)}/`,
            metadata,
            presenceJs
        };
        if (metadata.iframe)
            resJson.iframeJs = fs_1.readFileSync(`${pF}/dist/iframe.js`, "utf-8");
        return resJson;
    });
    const newPresences = presences.filter(p => !dbPresences.some(dP => dP.name === p.name)), deletedPresences = dbPresences.filter(dP => !presences.some(p => p.name === dP.name)), outdatedPresences = dbPresences
        .filter(p => presences.find(dp => p.name === dp.name && dp.metadata.version !== p.metadata.version))
        .map(dP => presences.find(p => p.name === dP.name));
    let nP, dP = [], oP = [];
    if (newPresences.length > 0)
        nP = MongoClient.db("PreMiD")
            .collection("presences")
            .insertMany(newPresences);
    if (deletedPresences.length > 0)
        dP = deletedPresences.map(p => MongoClient.db("PreMiD")
            .collection("presences")
            .deleteOne({ name: p.name }));
    if (outdatedPresences.length > 0)
        oP = outdatedPresences.map(p => MongoClient.db("PreMiD")
            .collection("presences")
            .findOneAndUpdate({ name: p.metadata.service }, { $set: p }));
    Promise.all([nP, ...dP, ...oP]).then(() => MongoClient.close());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2VVcGRhdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJlc2VuY2VVcGRhdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXFDO0FBQ3JDLHFDQUErQztBQUMvQywyQkFBeUQ7QUFFekQsaUJBQU8sQ0FDTCxhQUFhLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxRQUFRLEVBQ3JHO0lBQ0UsT0FBTyxFQUFFLHdCQUF3QjtJQUNqQyxrQkFBa0IsRUFBRSxJQUFJO0NBQ3pCLENBQ0YsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFWixLQUFLLFVBQVUsR0FBRyxDQUFDLFdBQXdCO0lBQ3pDLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7U0FDL0MsVUFBVSxDQUFDLFdBQVcsQ0FBQztTQUN2QixJQUFJLEVBQUU7U0FDTixPQUFPLEVBQUUsQ0FBQztJQUViLE1BQU0sZUFBZSxHQUFHLGdCQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUM5QyxFQUFFLENBQUMsRUFBRSxDQUNILENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFDbkIsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUNuQixDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQzlCLGFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FDN0IsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDekMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDdkIsaUJBQVksQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQ2xELEVB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